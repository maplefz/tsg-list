// Generated by CoffeeScript 1.10.0
var NodeClient, Promise, XhrClient, fs, newError, request,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Promise = require('broken');

fs = require('fs');

request = require('request');

XhrClient = require('./xhr');

newError = require('../utils').newError;

module.exports = NodeClient = (function(superClass) {
  extend(NodeClient, superClass);

  function NodeClient(opts) {
    if (opts == null) {
      opts = {};
    }
    if (!(this instanceof NodeClient)) {
      return new NodeClient(opts);
    }
    this.key = opts.key, this.debug = opts.debug;
    if (NodeClient.ENDPOINT) {
      this.setEndpoint(NodeClient.ENDPOINT);
    }
    if (NodeClient.DEBUG) {
      this.debug = true;
    }
    if (opts.endpoint) {
      this.setEndpoint(opts.endpoint);
    }
  }

  NodeClient.prototype.request = function(blueprint, data, key) {
    var opts, ref;
    if (data == null) {
      data = {};
    }
    if (key == null) {
      key = this.getKey();
    }
    opts = {
      url: this.getUrl(blueprint.url, data, key),
      method: blueprint.method,
      headers: (ref = blueprint.headers) != null ? ref : {},
      followAllRedirects: true
    };
    if (data.body != null) {
      opts.body = data.body;
    }
    if ((blueprint.stream != null) || (blueprint.file != null)) {
      delete opts.json;
    } else {
      if ((['POST', 'PATCH', 'PUT'].indexOf(opts.method)) !== -1) {
        opts.json = data;
      } else {
        opts.json = true;
      }
    }
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var req;
        if ((blueprint.file != null) && (data.body == null)) {
          fs.readFile(blueprint.file(data), function(err, body) {
            if (err != null) {
              return reject(err);
            }
            data.body = body;
            return (_this.request(blueprint, data, key)).then(resolve)["catch"](reject);
          });
          return;
        }
        if (_this.debug) {
          console.log('--REQUEST--');
          console.log(opts);
        }
        req = request(opts, function(err, res) {
          var _err, ref1;
          if (res != null) {
            if (_this.debug) {
              console.log('--RESPONSE--');
              console.log({
                status: res.statusCode,
                body: res.body
              });
            }
            res.status = res.statusCode;
            res.data = res.body;
          }
          if ((err != null) || (res.status > 308) || (((ref1 = res.data) != null ? ref1.error : void 0) != null)) {
            _err = newError(opts, res, err);
            if (_this.debug) {
              console.log('--ERROR--');
              console.log({
                message: _err.message,
                status: _err.status,
                type: _err.type
              });
              if (err != null) {
                console.log(err.stack);
              }
            }
            return reject(_err);
          }
          return resolve({
            url: opts.url,
            req: opts,
            res: res,
            data: res.data,
            responseText: res.data,
            status: res.status,
            statusText: res.statusText,
            headers: res.headers
          });
        });
        if (blueprint.stream != null) {
          return (blueprint.stream.call(_this, data)).pipe(req);
        }
      };
    })(this));
  };

  return NodeClient;

})(XhrClient);

//# sourceMappingURL=node.js.map
