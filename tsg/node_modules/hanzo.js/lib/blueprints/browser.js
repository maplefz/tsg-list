// Generated by CoffeeScript 1.10.0
var blueprints, byId, createBlueprint, fn, i, isFunction, len, model, models, ref, ref1, statusCreated, statusNoContent, statusOk, storePrefixed;

ref = require('../utils'), isFunction = ref.isFunction, statusCreated = ref.statusCreated, statusNoContent = ref.statusNoContent, statusOk = ref.statusOk;

ref1 = require('./url'), byId = ref1.byId, storePrefixed = ref1.storePrefixed;

createBlueprint = function(name) {
  var endpoint;
  endpoint = "/" + name;
  return {
    list: {
      url: endpoint,
      method: 'GET',
      expects: statusOk
    },
    get: {
      url: byId(name),
      method: 'GET',
      expects: statusOk
    }
  };
};

blueprints = {
  account: {
    get: {
      url: '/account',
      method: 'GET',
      expects: statusOk,
      useCustomerToken: true
    },
    update: {
      url: '/account',
      method: 'PATCH',
      expects: statusOk,
      useCustomerToken: true
    },
    exists: {
      url: function(x) {
        var ref2, ref3, ref4;
        return "/account/exists/" + ((ref2 = (ref3 = (ref4 = x.email) != null ? ref4 : x.username) != null ? ref3 : x.id) != null ? ref2 : x);
      },
      method: 'GET',
      expects: statusOk,
      process: function(res) {
        return res.data.exists;
      }
    },
    create: {
      url: '/account/create',
      method: 'POST',
      expects: statusCreated
    },
    enable: {
      url: function(x) {
        var ref2;
        return "/account/enable/" + ((ref2 = x.tokenId) != null ? ref2 : x);
      },
      method: 'POST',
      expects: statusOk
    },
    login: {
      url: '/account/login',
      method: 'POST',
      expects: statusOk,
      process: function(res) {
        this.setCustomerToken(res.data.token);
        return res;
      }
    },
    logout: function() {
      return this.deleteCustomerToken();
    },
    reset: {
      url: '/account/reset',
      method: 'POST',
      expects: statusOk,
      useCustomerToken: true
    },
    updateOrder: {
      url: function(x) {
        var ref2, ref3;
        return "/account/order/" + ((ref2 = (ref3 = x.orderId) != null ? ref3 : x.id) != null ? ref2 : x);
      },
      method: 'PATCH',
      expects: statusOk,
      useCustomerToken: true
    },
    confirm: {
      url: function(x) {
        var ref2;
        return "/account/confirm/" + ((ref2 = x.tokenId) != null ? ref2 : x);
      },
      method: 'POST',
      expects: statusOk,
      useCustomerToken: true
    }
  },
  cart: {
    create: {
      url: '/cart',
      method: 'POST',
      expects: statusCreated
    },
    update: {
      url: function(x) {
        var ref2;
        return "/cart/" + ((ref2 = x.id) != null ? ref2 : x);
      },
      method: 'PATCH',
      expects: statusOk
    },
    discard: {
      url: function(x) {
        var ref2;
        return "/cart/" + ((ref2 = x.id) != null ? ref2 : x) + "/discard";
      },
      method: 'POST',
      expects: statusOk
    },
    set: {
      url: function(x) {
        var ref2;
        return "/cart/" + ((ref2 = x.id) != null ? ref2 : x) + "/set";
      },
      method: 'POST',
      expects: statusOk
    }
  },
  review: {
    create: {
      url: '/review',
      method: 'POST',
      expects: statusCreated
    },
    get: {
      url: function(x) {
        var ref2;
        return "/review/" + ((ref2 = x.id) != null ? ref2 : x);
      },
      method: 'GET',
      expects: statusOk
    }
  },
  checkout: {
    authorize: {
      url: storePrefixed('/checkout/authorize'),
      method: 'POST',
      expects: statusOk
    },
    capture: {
      url: storePrefixed(function(x) {
        var ref2;
        return "/checkout/capture/" + ((ref2 = x.orderId) != null ? ref2 : x);
      }),
      method: 'POST',
      expects: statusOk
    },
    charge: {
      url: storePrefixed('/checkout/charge'),
      method: 'POST',
      expects: statusOk
    },
    paypal: {
      url: storePrefixed('/checkout/paypal'),
      method: 'POST',
      expects: statusOk
    }
  },
  referrer: {
    create: {
      url: '/referrer',
      method: 'POST',
      expects: statusCreated
    },
    get: {
      url: function(x) {
        var ref2;
        return "/referrer/" + ((ref2 = x.id) != null ? ref2 : x);
      },
      method: 'GET',
      expects: statusOk
    }
  }
};

models = ['collection', 'coupon', 'product', 'variant'];

fn = function(model) {
  return blueprints[model] = createBlueprint(model);
};
for (i = 0, len = models.length; i < len; i++) {
  model = models[i];
  fn(model);
}

module.exports = blueprints;

//# sourceMappingURL=browser.js.map
