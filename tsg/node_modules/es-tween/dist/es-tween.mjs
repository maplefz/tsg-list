var browser = (function() {
  var loadTime, now;
  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
    now = function() {
      return performance.now();
    };
  } else {
    now = function() {
      return Date.now() - loadTime;
    };
    loadTime = new Date().getTime();
  }
  return now;
})();

/**
 * Tween.js - Licensed under the MIT license
 * https://github.com/tweenjs/tween.js
 * ----------------------------------------------
 *
 * See https://github.com/tweenjs/tween.js/graphs/contributors for the full list of contributors.
 * Thank you all, you're awesome!
 */
var TWEEN;

TWEEN = TWEEN || (function() {
  var _tweens;
  _tweens = [];
  return {
    getAll: function() {
      return _tweens;
    },
    removeAll: function() {
      _tweens = [];
    },
    add: function(tween) {
      _tweens.push(tween);
    },
    remove: function(tween) {
      var i;
      i = _tweens.indexOf(tween);
      if (i !== -1) {
        _tweens.splice(i, 1);
      }
    },
    update: function(time, preserve) {
      var i;
      if (_tweens.length === 0) {
        return false;
      }
      i = 0;
      time = time !== void 0 ? time : TWEEN.now();
      while (i < _tweens.length) {
        if (_tweens[i].update(time) || preserve) {
          i++;
        } else {
          _tweens.splice(i, 1);
        }
      }
      return true;
    }
  };
})();

TWEEN.now = browser;

TWEEN.Tween = function(object) {
  var _chainedTweens, _delayTime, _duration, _easingFunction, _interpolationFunction, _isPlaying, _object, _onCompleteCallback, _onStartCallback, _onStartCallbackFired, _onStopCallback, _onUpdateCallback, _repeat, _repeatDelayTime, _reversed, _startTime, _valuesEnd, _valuesStart, _valuesStartRepeat, _yoyo;
  _object = object;
  _valuesStart = {};
  _valuesEnd = {};
  _valuesStartRepeat = {};
  _duration = 1000;
  _repeat = 0;
  _repeatDelayTime = void 0;
  _yoyo = false;
  _isPlaying = false;
  _reversed = false;
  _delayTime = 0;
  _startTime = null;
  _easingFunction = TWEEN.Easing.Linear.None;
  _interpolationFunction = TWEEN.Interpolation.Linear;
  _chainedTweens = [];
  _onStartCallback = null;
  _onStartCallbackFired = false;
  _onUpdateCallback = null;
  _onCompleteCallback = null;
  _onStopCallback = null;
  this.to = function(properties, duration) {
    _valuesEnd = properties;
    if (duration !== void 0) {
      _duration = duration;
    }
    return this;
  };
  this.start = function(time) {
    var property;
    TWEEN.add(this);
    _isPlaying = true;
    _onStartCallbackFired = false;
    _startTime = time !== void 0 ? time : TWEEN.now();
    _startTime += _delayTime;
    for (property in _valuesEnd) {
      if (_valuesEnd[property] instanceof Array) {
        if (_valuesEnd[property].length === 0) {
          continue;
        }
        _valuesEnd[property] = [_object[property]].concat(_valuesEnd[property]);
      }
      if (_object[property] === void 0) {
        continue;
      }
      _valuesStart[property] = _object[property];
      if (_valuesStart[property] instanceof Array === false) {
        _valuesStart[property] *= 1.0;
      }
      _valuesStartRepeat[property] = _valuesStart[property] || 0;
    }
    return this;
  };
  this.stop = function() {
    if (!_isPlaying) {
      return this;
    }
    TWEEN.remove(this);
    _isPlaying = false;
    if (_onStopCallback !== null) {
      _onStopCallback.call(_object, _object);
    }
    this.stopChainedTweens();
    return this;
  };
  this.end = function() {
    this.update(_startTime + _duration);
    return this;
  };
  this.stopChainedTweens = function() {
    var i, numChainedTweens;
    i = 0;
    numChainedTweens = _chainedTweens.length;
    while (i < numChainedTweens) {
      _chainedTweens[i].stop();
      i++;
    }
  };
  this.delay = function(amount) {
    _delayTime = amount;
    return this;
  };
  this.repeat = function(times) {
    _repeat = times;
    return this;
  };
  this.repeatDelay = function(amount) {
    _repeatDelayTime = amount;
    return this;
  };
  this.yoyo = function(yoyo) {
    _yoyo = yoyo;
    return this;
  };
  this.easing = function(easing) {
    _easingFunction = easing;
    return this;
  };
  this.interpolation = function(interpolation) {
    _interpolationFunction = interpolation;
    return this;
  };
  this.chain = function() {
    _chainedTweens = arguments;
    return this;
  };
  this.onStart = function(callback) {
    _onStartCallback = callback;
    return this;
  };
  this.onUpdate = function(callback) {
    _onUpdateCallback = callback;
    return this;
  };
  this.onComplete = function(callback) {
    _onCompleteCallback = callback;
    return this;
  };
  this.onStop = function(callback) {
    _onStopCallback = callback;
    return this;
  };
  this.update = function(time) {
    var elapsed, end, i, numChainedTweens, property, start, tmp, value;
    property = void 0;
    elapsed = void 0;
    value = void 0;
    if (time < _startTime) {
      return true;
    }
    if (_onStartCallbackFired === false) {
      if (_onStartCallback !== null) {
        _onStartCallback.call(_object, _object);
      }
      _onStartCallbackFired = true;
    }
    elapsed = (time - _startTime) / _duration;
    elapsed = elapsed > 1 ? 1 : elapsed;
    value = _easingFunction(elapsed);
    for (property in _valuesEnd) {
      property = property;
      if (_valuesStart[property] === void 0) {
        i++;
        continue;
      }
      start = _valuesStart[property] || 0;
      end = _valuesEnd[property];
      if (end instanceof Array) {
        _object[property] = _interpolationFunction(end, value);
      } else {
        if (typeof end === 'string') {
          if (end.charAt(0) === '+' || end.charAt(0) === '-') {
            end = start + parseFloat(end);
          } else {
            end = parseFloat(end);
          }
        }
        if (typeof end === 'number') {
          _object[property] = start + (end - start) * value;
        }
      }
    }
    if (_onUpdateCallback !== null) {
      _onUpdateCallback.call(_object, value);
    }
    if (elapsed === 1) {
      if (_repeat > 0) {
        if (isFinite(_repeat)) {
          _repeat--;
        }
        for (property in _valuesStartRepeat) {
          property = property;
          if (typeof _valuesEnd[property] === 'string') {
            _valuesStartRepeat[property] = _valuesStartRepeat[property] + parseFloat(_valuesEnd[property]);
          }
          if (_yoyo) {
            tmp = _valuesStartRepeat[property];
            _valuesStartRepeat[property] = _valuesEnd[property];
            _valuesEnd[property] = tmp;
          }
          _valuesStart[property] = _valuesStartRepeat[property];
        }
        if (_yoyo) {
          _reversed = !_reversed;
        }
        if (_repeatDelayTime !== void 0) {
          _startTime = time + _repeatDelayTime;
        } else {
          _startTime = time + _delayTime;
        }
        return true;
      } else {
        if (_onCompleteCallback !== null) {
          _onCompleteCallback.call(_object, _object);
        }
        i = 0;
        numChainedTweens = _chainedTweens.length;
        while (i < numChainedTweens) {
          _chainedTweens[i].start(_startTime + _duration);
          i++;
        }
        return false;
      }
    }
    return true;
  };
};

TWEEN.Easing = {
  Linear: {
    None: function(k) {
      return k;
    }
  },
  Quadratic: {
    In: function(k) {
      return k * k;
    },
    Out: function(k) {
      return k * (2 - k);
    },
    InOut: function(k) {
      if ((k *= 2) < 1) {
        return 0.5 * k * k;
      }
      return -0.5 * (--k * (k - 2) - 1);
    }
  },
  Cubic: {
    In: function(k) {
      return k * k * k;
    },
    Out: function(k) {
      return --k * k * k + 1;
    },
    InOut: function(k) {
      if ((k *= 2) < 1) {
        return 0.5 * k * k * k;
      }
      return 0.5 * ((k -= 2) * k * k + 2);
    }
  },
  Quartic: {
    In: function(k) {
      return k * k * k * k;
    },
    Out: function(k) {
      return 1 - (--k * k * k * k);
    },
    InOut: function(k) {
      if ((k *= 2) < 1) {
        return 0.5 * k * k * k * k;
      }
      return -0.5 * ((k -= 2) * k * k * k - 2);
    }
  },
  Quintic: {
    In: function(k) {
      return k * k * k * k * k;
    },
    Out: function(k) {
      return --k * k * k * k * k + 1;
    },
    InOut: function(k) {
      if ((k *= 2) < 1) {
        return 0.5 * k * k * k * k * k;
      }
      return 0.5 * ((k -= 2) * k * k * k * k + 2);
    }
  },
  Sinusoidal: {
    In: function(k) {
      return 1 - Math.cos(k * Math.PI / 2);
    },
    Out: function(k) {
      return Math.sin(k * Math.PI / 2);
    },
    InOut: function(k) {
      return 0.5 * (1 - Math.cos(Math.PI * k));
    }
  },
  Exponential: {
    In: function(k) {
      if (k === 0) {
        return 0;
      } else {
        return Math.pow(1024, k - 1);
      }
    },
    Out: function(k) {
      if (k === 1) {
        return 1;
      } else {
        return 1 - Math.pow(2, -10 * k);
      }
    },
    InOut: function(k) {
      if (k === 0) {
        return 0;
      }
      if (k === 1) {
        return 1;
      }
      if ((k *= 2) < 1) {
        return 0.5 * Math.pow(1024, k - 1);
      }
      return 0.5 * (-(Math.pow(2, -10 * (k - 1))) + 2);
    }
  },
  Circular: {
    In: function(k) {
      return 1 - Math.sqrt(1 - (k * k));
    },
    Out: function(k) {
      return Math.sqrt(1 - (--k * k));
    },
    InOut: function(k) {
      if ((k *= 2) < 1) {
        return -0.5 * (Math.sqrt(1 - (k * k)) - 1);
      }
      return 0.5 * (Math.sqrt(1 - ((k -= 2) * k)) + 1);
    }
  },
  Elastic: {
    In: function(k) {
      if (k === 0) {
        return 0;
      }
      if (k === 1) {
        return 1;
      }
      return -(Math.pow(2, 10 * (k - 1))) * Math.sin((k - 1.1) * 5 * Math.PI);
    },
    Out: function(k) {
      if (k === 0) {
        return 0;
      }
      if (k === 1) {
        return 1;
      }
      return Math.pow(2, -10 * k) * Math.sin((k - 0.1) * 5 * Math.PI) + 1;
    },
    InOut: function(k) {
      if (k === 0) {
        return 0;
      }
      if (k === 1) {
        return 1;
      }
      k *= 2;
      if (k < 1) {
        return -0.5 * Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);
      }
      return 0.5 * Math.pow(2, -10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI) + 1;
    }
  },
  Back: {
    In: function(k) {
      var s;
      s = 1.70158;
      return k * k * ((s + 1) * k - s);
    },
    Out: function(k) {
      var s;
      s = 1.70158;
      return --k * k * ((s + 1) * k + s) + 1;
    },
    InOut: function(k) {
      var s;
      s = 1.70158 * 1.525;
      if ((k *= 2) < 1) {
        return 0.5 * k * k * ((s + 1) * k - s);
      }
      return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);
    }
  },
  Bounce: {
    In: function(k) {
      return 1 - TWEEN.Easing.Bounce.Out(1 - k);
    },
    Out: function(k) {
      if (k < 1 / 2.75) {
        return 7.5625 * k * k;
      } else if (k < 2 / 2.75) {
        return 7.5625 * (k -= 1.5 / 2.75) * k + 0.75;
      } else if (k < 2.5 / 2.75) {
        return 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375;
      } else {
        return 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375;
      }
    },
    InOut: function(k) {
      if (k < 0.5) {
        return TWEEN.Easing.Bounce.In(k * 2) * 0.5;
      }
      return TWEEN.Easing.Bounce.Out(k * 2 - 1) * 0.5 + 0.5;
    }
  }
};

TWEEN.Interpolation = {
  Linear: function(v, k) {
    var f, fn, i, m;
    m = v.length - 1;
    f = m * k;
    i = Math.floor(f);
    fn = TWEEN.Interpolation.Utils.Linear;
    if (k < 0) {
      return fn(v[0], v[1], f);
    }
    if (k > 1) {
      return fn(v[m], v[m - 1], m - f);
    }
    return fn(v[i], v[i + 1 > m ? m : i + 1], f - i);
  },
  Bezier: function(v, k) {
    var b, bn, i, n, pw;
    b = 0;
    n = v.length - 1;
    pw = Math.pow;
    bn = TWEEN.Interpolation.Utils.Bernstein;
    i = 0;
    while (i <= n) {
      b += pw(1 - k, n - i) * pw(k, i) * v[i] * bn(n, i);
      i++;
    }
    return b;
  },
  CatmullRom: function(v, k) {
    var f, fn, i, m;
    m = v.length - 1;
    f = m * k;
    i = Math.floor(f);
    fn = TWEEN.Interpolation.Utils.CatmullRom;
    if (v[0] === v[m]) {
      if (k < 0) {
        i = Math.floor(f = m * (1 + k));
      }
      return fn(v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m], f - i);
    } else {
      if (k < 0) {
        return v[0] - (fn(v[0], v[0], v[1], v[1], -f) - v[0]);
      }
      if (k > 1) {
        return v[m] - (fn(v[m], v[m], v[m - 1], v[m - 1], f - m) - v[m]);
      }
      return fn(v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2], f - i);
    }
  },
  Utils: {
    Linear: function(p0, p1, t) {
      return (p1 - p0) * t + p0;
    },
    Bernstein: function(n, i) {
      var fc;
      fc = TWEEN.Interpolation.Utils.Factorial;
      return fc(n) / fc(i) / fc(n - i);
    },
    Factorial: (function() {
      var a;
      a = [1];
      return function(n) {
        var i, s;
        s = 1;
        if (a[n]) {
          return a[n];
        }
        i = n;
        while (i > 1) {
          s *= i;
          i--;
        }
        a[n] = s;
        return s;
      };
    })(),
    CatmullRom: function(p0, p1, p2, p3, t) {
      var t2, t3, v0, v1;
      v0 = (p2 - p0) * 0.5;
      v1 = (p3 - p1) * 0.5;
      t2 = t * t;
      t3 = t * t2;
      return (2 * p1 - (2 * p2) + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - (2 * v0) - v1) * t2 + v0 * t + p1;
    }
  }
};

var TWEEN$1 = TWEEN;

export default TWEEN$1;
